<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<article id="jam" dirname="jam" last-revision="$Date: 2016/05/05 21:18:13 $" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Boost.Jam : 3.1.19</title>
  <articleinfo>
    <authorgroup>
    <author>
      <firstname>Rene</firstname> <surname>Rivera</surname>
    </author>
    <author>
      <firstname>David</firstname> <surname>Abrahams</surname>
    </author>
    <author>
      <firstname>Vladimir</firstname> <surname>Prus</surname>
    </author>
    </authorgroup>
    <copyright>
      <year>2003</year> <year>2004</year> <year>2005</year> <year>2006</year> <year>2007</year>
      <holder>Rene Rivera, David Abrahams, Vladimir Prus</holder>
    </copyright>
    <legalnotice id="jam.legal">
      <para>
        Distributed under the Boost Software License, Version 1.0. (See accompanying
        file LICENSE_1_0.txt or copy at <ulink url="http://www.boost.org/LICENSE_1_0.txt">http://www.boost.org/LICENSE_1_0.txt</ulink>)
      </para>
    </legalnotice>
    <articlepurpose>
      Jam is a make(1) replacement that makes building simple things simple and building
      complicated things manageable.
    </articlepurpose>
    <articlecategory name="category:tool-build"></articlecategory>
  </articleinfo>
  <section id="jam.building">
    <title><link linkend="jam.building">Building B2</link></title>
    <para>
      Installing <literal>B2</literal> after building it is simply a matter of copying
      the generated executables someplace in your <literal>PATH</literal>. For building
      the executables there are a set of <literal>build</literal> bootstrap scripts
      to accomodate particular environments. The scripts take one optional argument,
      the name of the toolset to build with. When the toolset is not given an attempt
      is made to detect an available toolset and use that. The build scripts accept
      these arguments:
    </para>
<programlisting><emphasis>build</emphasis> [<emphasis>toolset</emphasis>]
</programlisting>
    <para>
      Running the scripts without arguments will give you the best chance of success.
      On Windows platforms from a command console do:
    </para>
<programlisting>cd <emphasis>jam source location</emphasis>
.\build.bat
</programlisting>
    <para>
      On Unix type platforms do:
    </para>
<programlisting>cd <emphasis>jam source location</emphasis>
sh ./build.sh
</programlisting>
    <para>
      For the Boost.Jam source included with the Boost distribution the <emphasis>jam
      source location</emphasis> is <literal>BOOST_ROOT/tools/build/src/engine</literal>.
    </para>
    <para>
      If the scripts fail to detect an appropriate toolset to build with your particular
      toolset may not be auto-detectable. In that case, you can specify the toolset
      as the first argument, this assumes that the toolset is readily available in
      the <literal>PATH</literal>.
    </para>
    <note>
      <para>
        The toolset used to build Boost.Jam is independent of the toolsets used for
        Boost.Build. Only one version of Boost.Jam is needed to use Boost.Build.
      </para>
    </note>
    <para>
      The supported toolsets, and whether they are auto-detected, are:
    </para>
    <table frame="all" id="jam.building.t0">
      <title>Supported Toolsets</title>
      <tgroup cols="4">
        <thead>
          <row>
            <entry>
              <para>
                Script
              </para>
            </entry>
            <entry>
              <para>
                Platform
              </para>
            </entry>
            <entry>
              <para>
                Toolset
              </para>
            </entry>
            <entry>
              <para>
                Detection and Notes
              </para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>
                <literal>build.bat</literal>
              </para>
            </entry>
            <entry>
              <para>
                Windows NT, 2000, and XP
              </para>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://www.codegear.com/downloads/free/cppbuilder"><literal>borland</literal></ulink></member>
        <member><ulink
                url="http://www.borland.com/">Borland</ulink> C++Builder (BCC 5.5)</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem>Common install location: &quot;<literal>C:\Borland\BCC55</literal>&quot;</listitem>
        <listitem><literal>BCC32.EXE</literal>
                in <literal>PATH</literal></listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://www.comeaucomputing.com/"><literal>como</literal></ulink></member>
        <member>Comeau
                Computing C/C++</member>
        </simplelist>
              </para>
            </entry>
            <entry>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://gcc.gnu.org/"><literal>gcc</literal></ulink></member>
        <member>GNU
                GCC</member>
        </simplelist>
              </para>
            </entry>
            <entry>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://gcc.gnu.org/"><literal>gcc-nocygwin</literal></ulink></member>
        <member>GNU
                GCC</member>
        </simplelist>
              </para>
            </entry>
            <entry>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://www.intel.com/software/products/compilers/c60"><literal>intel-win32</literal></ulink></member>
        <member>Intel
                C++ Compiler for Windows</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem><literal>ICL.EXE</literal> in <literal>PATH</literal></listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://www.metrowerks.com/"><literal>metrowerks</literal></ulink></member>
        <member>MetroWerks
                CodeWarrior C/C++ 7.x, 8.x, 9.x</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem><literal>CWFolder</literal> variable configured</listitem>
        <listitem><literal>MWCC.EXE</literal>
                in <literal>PATH</literal></listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://www.mingw.org/"><literal>mingw</literal></ulink></member>
        <member>GNU
                <ulink url="http://gcc.gnu.org/">GCC</ulink> as the <ulink url="http://www.mingw.org/">MinGW</ulink>
                configuration</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem>Common install location: &quot;<literal>C:\MinGW</literal>&quot;</listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://msdn.microsoft.com/visualc/"><literal>msvc</literal></ulink></member>
        <member>Microsoft
                Visual C++ 6.x</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem><literal>VCVARS32.BAT</literal> already configured</listitem>
        <listitem><literal>%MSVCDir%</literal>
                is present in environment</listitem>
        <listitem>Common install locations: &quot;<literal>%ProgramFiles%\Microsoft
                Visual Studio</literal>&quot;, &quot;<literal>%ProgramFiles%\Microsoft
                Visual C++</literal>&quot;</listitem>
        <listitem><literal>CL.EXE</literal> in <literal>PATH</literal></listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://msdn.microsoft.com/visualc/"><literal>vc7</literal></ulink></member>
        <member>Microsoft
                Visual C++ 7.x</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem><literal>VCVARS32.BAT</literal> or <literal>VSVARS32.BAT</literal>
                already configured</listitem>
        <listitem><literal>%VS71COMNTOOLS%</literal> is present in
                environment</listitem>
        <listitem><literal>%VCINSTALLDIR%</literal> is present in environment</listitem>
        <listitem>Common
                install locations: &quot;<literal>%ProgramFiles%\Microsoft Visual
                Studio .NET</literal>&quot;, &quot;<literal>%ProgramFiles%\Microsoft
                Visual Studio .NET 2003</literal>&quot;</listitem>
        <listitem><literal>CL.EXE</literal>
                in <literal>PATH</literal></listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://msdn.microsoft.com/visualc/"><literal>vc8</literal>
                and <literal>vc9</literal></ulink></member>
        <member>Microsoft Visual C++ 8.x and 9.x</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                Detection: <itemizedlist><listitem><literal>VCVARSALL.BAT</literal> already configured</listitem>
            <listitem><literal>%VS90COMNTOOLS%</literal>
                is present in environment</listitem>
            <listitem>Common install location: &quot;<literal>%ProgramFiles%\Microsoft
                Visual Studio 9</literal>&quot;</listitem>
            <listitem><literal>%VS80COMNTOOLS%</literal>
                is present in environment</listitem>
            <listitem>Common install location: &quot;<literal>%ProgramFiles%\Microsoft
                Visual Studio 8</literal>&quot;</listitem>
            <listitem><literal>CL.EXE</literal> in <literal>PATH</literal></listitem>
            </itemizedlist>
              </para>
              <para>
                Notes: <itemizedlist><listitem>If <literal>VCVARSALL.BAT</literal> is called to set up the
                toolset, it is passed all the extra arguments, see below for what
                those arguments are. This can be used to build, for example, a Win64
                specific version of <literal>b2</literal>. Consult the VisualStudio
                documentation for what the possible argument values to the <literal>VCVARSALL.BAT</literal>
                are.</listitem>
            </itemizedlist>
  </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <literal>build.sh</literal>
              </para>
            </entry>
            <entry>
              <para>
                Unix, Linux, Cygwin, etc.
              </para>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://www.hp.com/go/c++"><literal>acc</literal></ulink></member>
        <member>HP-UX
                aCC</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem><literal>aCC</literal> in <literal>PATH</literal></listitem>
        <listitem><literal>uname</literal>
                is &quot;HP-UX&quot;</listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://www.comeaucomputing.com/"><literal>como</literal></ulink></member>
        <member>Comeau
                Computing C/C++</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem>como in <literal>PATH</literal></listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://gcc.gnu.org/"><literal>gcc</literal></ulink></member>
        <member>GNU
                GCC</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem>gcc in <literal>PATH</literal></listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://www.intel.com/software/products/compilers/c60l/"><literal>intel-linux</literal></ulink></member>
        <member>Intel
                C++ for Linux</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem><literal>icc</literal> in <literal>PATH</literal></listitem>
        <listitem>Common install locations:
                &quot;<literal>/opt/intel/cc/9.0</literal>&quot;, &quot;<literal>/opt/intel_cc_80</literal>&quot;,
                &quot;<literal>/opt/intel/compiler70</literal>&quot;, &quot;<literal>/opt/intel/compiler60</literal>&quot;,
                &quot;<literal>/opt/intel/compiler50</literal>&quot;</listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><literal>kcc</literal></member>
        <member>Intel KAI C++</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem><literal>KCC</literal> in <literal>PATH</literal></listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://www.codegear.com/downloads/free/cppbuilder"><literal>kylix</literal></ulink></member>
        <member><ulink
                url="http://www.borland.com/">Borland</ulink> C++Builder</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem>bc++ in PATH</listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://www.sgi.com/developers/devtools/languages/mipspro.html"><literal>mipspro</literal></ulink></member>
        <member>SGI
                MIPSpro C</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem><literal>uname</literal> is &quot;<literal>IRIX</literal>&quot; or
                &quot;<literal>IRIX64</literal>&quot;</listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><literal>sunpro</literal></member>
        <member>Sun Workshop 6 C++</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem>Standard install location: &quot;<literal>/opt/SUNWspro</literal>&quot;</listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><literal>qcc</literal></member>
        <member><ulink url="http://www.qnx.com/">QNX Neutrino</ulink></member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem><literal>uname</literal> is &quot;<literal>QNX</literal>&quot; and
                <literal>qcc</literal> in <literal>PATH</literal></listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://www.tru64unix.compaq.com/cplus/"><literal>true64cxx</literal></ulink></member>
        <member>Compaq
                C++ Compiler for True64 UNIX</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem><literal>uname</literal> is &quot;<literal>OSF1</literal>&quot;</listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://www.ibm.com/software/awdtools/vacpp/"><literal>vacpp</literal></ulink></member>
        <member>IBM
                VisualAge C++</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem><literal>xlc</literal> in <literal>PATH</literal></listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
              <para>
                MacOS X
              </para>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://developer.apple.com/tools/compilers.html"><literal>darwin</literal></ulink></member>
        <member>Apple
                MacOS X GCC</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem><literal>uname</literal> is &quot;<literal>Darwin</literal>&quot;</listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
          <row>
            <entry>
            </entry>
            <entry>
              <para>
                Windows NT, 2000, and XP
              </para>
            </entry>
            <entry>
              <para>
                <simplelist type='vert' columns='1'><member><ulink url="http://www.mingw.org/"><literal>mingw</literal></ulink></member>
        <member>GNU
                <ulink url="http://gcc.gnu.org/">GCC</ulink> as the <ulink url="http://www.mingw.org/">MinGW</ulink>
                configuration with the MSYS shell</member>
        </simplelist>
              </para>
            </entry>
            <entry>
              <para>
                <itemizedlist><listitem>Common install location: &quot;<literal>/mingw</literal>&quot;</listitem>
        </itemizedlist>
              </para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>
      The built executables are placed in a subdirectory specific to your platform.
      For example, in Linux running on an Intel x86 compatible chip, the executables
      are placed in: &quot;<literal>bin.linuxx86</literal>&quot;. The =b2[.exe]=
      executable can be used to invoke Boost.Build.
    </para>
    <para>
      The build scripts support additional invocation arguments for use by developers
      of Boost.Jam and for additional setup of the toolset. The extra arguments come
      after the toolset:
    </para>
    <itemizedlist>
      <listitem>
        <simpara>
          Arguments not in the form of an option, before option arguments, are used
          for extra setup to toolset configuration scripts.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Arguments of the form &quot;<literal>--option</literal>&quot;, which are
          passed to the <literal>build.jam</literal> build script.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Arguments not in the form of an option, after the options, which are targets
          for the <literal>build.jam</literal> script.
        </simpara>
      </listitem>
    </itemizedlist>
<programlisting><emphasis>build</emphasis> [<emphasis>toolset</emphasis>] [<emphasis>setup</emphasis>*] [--<emphasis>option</emphasis>+ <emphasis>target</emphasis>*]
</programlisting>
    <para>
      The arguments immediately after the toolset are passed directly to the setup
      script of the toolset, if available and if it needs to be invoked. This allows
      one to configure the toolset ass needed to do non-default builds of <literal>b2</literal>.
      For example to build a Win64 version with <literal>vc8</literal>. See the toolset
      descriptiona above for when particular toolsets support this.
    </para>
    <para>
      The arguments starting with the &quot;<literal>--option</literal>&quot; forms
      are passed to the <literal>build.jam</literal> script and are used to further
      customize what gets built. Options and targets supported by the <literal>build.jam</literal>
      script:
    </para>
    <variablelist>
      <title></title>
      <varlistentry>
        <term><literallayout><literal>---</literal></literallayout></term>
        <listitem>
          <para>
            Empty option when one wants to only specify a target.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literallayout><literal>--release</literal></literallayout></term>
        <listitem>
          <para>
            The default, builds the optimized executable.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literallayout><literal>--debug</literal></literallayout></term>
        <listitem>
          <para>
            Builds debugging versions of the executable. When built they are placed
            in their own directory &quot;<literal>bin./platform/.debug</literal>&quot;.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literallayout><literal>--grammar</literal></literallayout></term>
        <listitem>
          <para>
            Normally the Jam language grammar parsing files are not regenerated.
            This forces building of the grammar, although it may not force the regeneration
            of the grammar parser. If the parser is out of date it will be regenerated
            and subsequently built.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literallayout><literal>--with-python=<emphasis>path</emphasis></literal></literallayout></term>
        <listitem>
          <para>
            Enables Python integration, given a path to the Python libraries.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literallayout><literal>--gc</literal></literallayout></term>
        <listitem>
          <para>
            Enables use of the Boehm Garbage Collector. The build will look for the
            Boehm-GC source in a &quot;boehm_gc&quot; subdirectory from the <literal>b2</literal>
            sources.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literallayout><literal>--duma</literal></literallayout></term>
        <listitem>
          <para>
            Enables use of the DUMA (Detect Uintended Memory Access) debugging memory
            allocator. The build expects to find the DUMA source files in a &quot;duma&quot;
            subdirectory from the <literal>b2</literal> sources.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literallayout><literal>--toolset-root=<emphasis>path</emphasis></literal></literallayout></term>
        <listitem>
          <para>
            Indicates where the toolset used to build is located. This option is
            passed in by the bootstrap (<literal>build.bat</literal> or <literal>build.sh</literal>)
            script.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literallayout><literal>--show-locate-target</literal></literallayout></term>
        <listitem>
          <para>
            For information, prints out where it will put the built executable.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literallayout><literal>--noassert</literal></literallayout></term>
        <listitem>
          <para>
            Disable debug assertions, even if building the debug version of the executable.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literallayout><literal>dist</literal></literallayout></term>
        <listitem>
          <para>
            Generate packages (compressed archives) as appropriate for distribution
            in the platform, if possible.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literallayout><literal>clean</literal></literallayout></term>
        <listitem>
          <para>
            Remove all the built executables and objects.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section id="jam.language">
    <title><link linkend="jam.language">Language</link></title>
    <para>
      <literal>B2</literal> has an interpreted, procedural language. Statements in
      <literal>b2</literal> are rule (procedure) definitions, rule invocations, flow-of-control
      structures, variable assignments, and sundry language support.
    </para>
    <section id="jam.language.lexical">
      <title><link linkend="jam.language.lexical">Lexical Features</link></title>
      <para>
        <literal>B2</literal> treats its input files as whitespace-separated tokens,
        with two exceptions: double quotes (&quot;) can enclose whitespace to embed
        it into a token, and everything between the matching curly braces ({}) in
        the definition of a rule action is treated as a single string. A backslash
        (\) can escape a double quote, or any single whitespace character.
      </para>
      <para>
        <literal>B2</literal> requires whitespace (blanks, tabs, or newlines) to
        surround all tokens, including the colon (:) and semicolon (;) tokens.
      </para>
      <para>
        <literal>B2</literal> keywords (an mentioned in this document) are reserved
        and generally must be quoted with double quotes (&quot;) to be used as arbitrary
        tokens, such as variable or target names.
      </para>
      <para>
        Comments start with the <literal>#</literal> character and extend until the
        end of line.
      </para>
    </section>
    <section id="jam.language.target">
      <title><link linkend="jam.language.target">Targets</link></title>
      <para>
        The essential <literal>b2</literal> data entity is a target. Build targets
        are files to be updated. Source targets are the files used in updating built
        targets. Built targets and source targets are collectively referred to as
        file targets, and frequently built targets are source targets for other built
        targets. Pseudotargets are symbols representing dependencies on other targets,
        but which are not themselves associated with any real file.
      </para>
      <para>
        A file target's identifier is generally the file's name, which can be absolutely
        rooted, relative to the directory of <literal>b2</literal>'s invocation,
        or simply local (no directory). Most often it is the last case, and the actual
        file path is bound using the <literal>$(SEARCH)</literal> and <literal>$(LOCATE)</literal>
        special variables. See <link linkend="jam.language.variables.builtins.search">SEARCH
        and LOCATE Variables</link> below. A local filename is optionally qualified
        with grist, a string value used to assure uniqueness. A file target with
        an identifier of the form <emphasis>file(member)</emphasis> is a library
        member (usually an <literal>ar</literal>(1) archive on Unix).
      </para>
      <section id="jam.language.target.binding_detection">
        <title><link linkend="jam.language.target.binding_detection">Binding Detection</link></title>
        <para>
          Whenever a target is bound to a location in the filesystem, Boost Jam will
          look for a variable called <literal>BINDRULE</literal> (first &quot;on&quot;
          the target being bound, then in the global module). If non-empty, =$(BINDRULE[1])=
          names a rule which is called with the name of the target and the path it
          is being bound to. The signature of the rule named by =$(BINDRULE[1])=
          should match the following:
        </para>
<programlisting>rule <emphasis>bind-rule</emphasis> ( <emphasis>target</emphasis> : <emphasis>path</emphasis> )
</programlisting>
        <para>
          This facility is useful for correct header file scanning, since many compilers
          will search for <code><phrase role="preprocessor">#include</phrase></code>
          files first in the directory containing the file doing the <code><phrase
          role="preprocessor">#include</phrase></code> directive. <literal>$(BINDRULE)</literal>
          can be used to make a record of that directory.
        </para>
      </section>
    </section>
    <section id="jam.language.rules">
      <title><link linkend="jam.language.rules">Rules</link></title>
      <para>
        The basic <literal>b2</literal> language entity is called a rule. A rule
        is defined in two parts: the procedure and the actions. The procedure is
        a body of jam statements to be run when the rule is invoked; the actions
        are the OS shell commands to execute when updating the built targets of the
        rule.
      </para>
      <para>
        Rules can return values, which can be expanded into a list with &quot;[
        <emphasis>rule</emphasis> <emphasis>args</emphasis> ... ]&quot;. A rule's
        value is the value of its last statement, though only the following statements
        have values: 'if' (value of the leg chosen), 'switch' (value of the case
        chosen), set (value of the resulting variable), and 'return' (value of its
        arguments).
      </para>
      <para>
        The <literal>b2</literal> statements for defining and invoking rules are
        as follows:
      </para>
      <para>
        Define a rule's procedure, replacing any previous definition.
      </para>
<programlisting>rule <emphasis>rulename</emphasis> { <emphasis>statements</emphasis> }
</programlisting>
      <para>
        Define a rule's updating actions, replacing any previous definition.
      </para>
<programlisting>actions [ <emphasis>modifiers</emphasis> ] <emphasis>rulename</emphasis> { <emphasis>commands</emphasis> }
</programlisting>
      <para>
        Invoke a rule.
      </para>
<programlisting><emphasis>rulename</emphasis> <emphasis>field1</emphasis> : <emphasis>field2</emphasis> : <emphasis>...</emphasis> : <emphasis>fieldN</emphasis> ;
</programlisting>
      <para>
        Invoke a rule under the influence of target's specific variables..
      </para>
<programlisting>on <emphasis>target</emphasis> <emphasis>rulename</emphasis> <emphasis>field1</emphasis> : <emphasis>field2</emphasis> : <emphasis>...</emphasis> : <emphasis>fieldN</emphasis> ;
</programlisting>
      <para>
        Used as an argument, expands to the return value of the rule invoked.
      </para>
<programlisting>[ <emphasis>rulename</emphasis> <emphasis>field1</emphasis> : <emphasis>field2</emphasis> : <emphasis>...</emphasis> : <emphasis>fieldN</emphasis> ]
[ on <emphasis>target</emphasis> <emphasis>rulename</emphasis> <emphasis>field1</emphasis> : <emphasis>field2</emphasis> : <emphasis>...</emphasis> : <emphasis>fieldN</emphasis> ]
</programlisting>
      <para>
        A rule is invoked with values in <emphasis>field1</emphasis> through <emphasis>fieldN</emphasis>.
        They may be referenced in the procedure's statements as <literal>$(1)</literal>
        through <literal>$(<emphasis>N</emphasis>)</literal> (9 max), and the first
        two only may be referenced in the action's <emphasis>commands</emphasis>
        as <literal>$(1)</literal> and <literal>$(2)</literal>. <literal>$(&lt;)</literal>
        and <literal>$(&gt;)</literal> are synonymous with <literal>$(1)</literal>
        and <literal>$(2)</literal>.
      </para>
      <para>
        Rules fall into two categories: updating rules (with actions), and pure procedure
        rules (without actions). Updating rules treat arguments <literal>$(1)</literal>
        and <literal>$(2)</literal> as built targets and sources, respectively, while
        pure procedure rules can take arbitrary arguments.
      </para>
      <para>
        When an updating rule is invoked, its updating actions are added to those
        associated with its built targets (<literal>$(1)</literal>) before the rule's
        procedure is run. Later, to build the targets in the updating phase, <emphasis>commands</emphasis>
        are passed to the OS command shell, with <literal>$(1)</literal> and <literal>$(2)</literal>
        replaced by bound versions of the target names. See Binding above.
      </para>
      <para>
        Rule invocation may be indirected through a variable:
      </para>
<programlisting>$(<emphasis>var</emphasis>) <emphasis>field1</emphasis> : <emphasis>field2</emphasis> : <emphasis>...</emphasis> : <emphasis>fieldN</emphasis> ;

on <emphasis>target</emphasis> $(<emphasis>var</emphasis>) <emphasis>field1</emphasis> : <emphasis>field2</emphasis> : <emphasis>...</emphasis> : <emphasis>fieldN</emphasis> ;

[ $(<emphasis>var</emphasis>) <emphasis>field1</emphasis> : <emphasis>field2</emphasis> : <emphasis>...</emphasis> : <emphasis>fieldN</emphasis> ]
[ on <emphasis>target</emphasis> $(<emphasis>var</emphasis>) <emphasis>field1</emphasis> : <emphasis>field2</emphasis> : <emphasis>...</emphasis> : <emphasis>fieldN</emphasis> ]
</programlisting>
      <para>
        The variable's value names the rule (or rules) to be invoked. A rule is invoked
        for each element in the list of <literal>$(<emphasis>var</emphasis>)</literal>'s
        values. The fields <literal><emphasis>field1</emphasis> : <emphasis>field2</emphasis>
        : <emphasis>...</emphasis></literal> are passed as arguments for each invokation.
        For the [ ... ] forms, the return value is the concatenation of the return
        values for all of the invocations.
      </para>
      <section id="jam.language.rules.action_modifiers">
        <title><link linkend="jam.language.rules.action_modifiers">Action Modifiers</link></title>
        <para>
          The following action modifiers are understood:
        </para>
        <variablelist>
          <title></title>
          <varlistentry>
            <term><literal>actions bind <emphasis>vars</emphasis></literal></term>
            <listitem>
              <para>
                <literal>$(<emphasis>vars</emphasis>)</literal> will be replaced
                with bound values.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>actions existing</literal></term>
            <listitem>
              <para>
                <literal>$(&gt;)</literal> includes only source targets currently
                existing.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>actions ignore</literal></term>
            <listitem>
              <para>
                The return status of the commands is ignored.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>actions piecemeal</literal></term>
            <listitem>
              <para>
                commands are repeatedly invoked with a subset of <literal>$(&gt;)</literal>
                small enough to fit in the command buffer on this OS.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>actions quietly</literal></term>
            <listitem>
              <para>
                The action is not echoed to the standard output.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>actions together</literal></term>
            <listitem>
              <para>
                The <literal>$(&gt;)</literal> from multiple invocations of the same
                action on the same built target are glommed together.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>actions updated</literal></term>
            <listitem>
              <para>
                <literal>$(&gt;)</literal> includes only source targets themselves
                marked for updating.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="jam.language.rules.argument_lists">
        <title><link linkend="jam.language.rules.argument_lists">Argument lists</link></title>
        <para>
          You can describe the arguments accepted by a rule, and refer to them by
          name within the rule. For example, the following prints &quot;I'm sorry,
          Dave&quot; to the console:
        </para>
<programlisting>rule report ( pronoun index ? : state : names + )
{
    local he.suffix she.suffix it.suffix = s ;
    local I.suffix = m ;
    local they.suffix you.suffix = re ;
    ECHO $(pronoun)'$($(pronoun).suffix) $(state), $(names[$(index)]) ;
}
report I 2 : sorry : Joe Dave Pete ;
</programlisting>
        <para>
          Each name in a list of formal arguments (separated by &quot;<literal>:</literal>&quot;
          in the rule declaration) is bound to a single element of the corresponding
          actual argument unless followed by one of these modifiers:
        </para>
        <informaltable frame="all">
          <tgroup cols="2">
            <thead>
              <row>
                <entry>
                  <para>
                    Symbol
                  </para>
                </entry>
                <entry>
                  <para>
                    Semantics of preceding symbol
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <literal>?</literal>
                  </para>
                </entry>
                <entry>
                  <para>
                    optional
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>*</literal>
                  </para>
                </entry>
                <entry>
                  <para>
                    Bind to zero or more unbound elements of the actual argument.
                    When <literal>*</literal> appears where an argument name is expected,
                    any number of additional arguments are accepted. This feature
                    can be used to implement &quot;varargs&quot; rules.
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>+</literal>
                  </para>
                </entry>
                <entry>
                  <para>
                    Bind to one or more unbound elements of the actual argument.
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
          The actual and formal arguments are checked for inconsistencies, which
          cause <literal>b2</literal> to exit with an error code:
        </para>
<programlisting>### argument error
# rule report ( pronoun index ?  : state  : names + )
# called with: ( I 2 foo  : sorry  : Joe Dave Pete )
# extra argument foo
### argument error
# rule report ( pronoun index ?  : state  : names + )
# called with: ( I 2  : sorry )
# missing argument names
</programlisting>
        <para>
          If you omit the list of formal arguments, all checking is bypassed as in
          &quot;classic&quot; Jam. Argument lists drastically improve the reliability
          and readability of your rules, however, and are <emphasis role="bold">strongly
          recommended</emphasis> for any new Jam code you write.
        </para>
      </section>
      <section id="jam.language.rules.builtins">
        <title><link linkend="jam.language.rules.builtins">Built-in Rules</link